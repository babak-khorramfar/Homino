"""
Django settings for homino project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging.handlers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[{levelname}] {asctime} {name} >> {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.handlers.WatchedFileHandler",
            "filename": BASE_DIR / "logs/test.log",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["file"],
            "level": "WARNING",
            "propagate": False,
        },
        "mytest": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

AUTH_USER_MODEL = "users.CustomUser"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-6pmloj96cot2k#3ios_8v5@5%5cq0pswldeao41tg&-z5pi@=k"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "services",
    "users",
    "common",
    "mptt",
    "pwa",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "common.middleware.ActivityLoggingMiddleware",
]

ROOT_URLCONF = "homino.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "services.context_processors.nav_items",
            ],
        },
    },
]

WSGI_APPLICATION = "homino.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if os.environ.get("USE_POSTGRES") == "1":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("DB_NAME"),
            "USER": os.environ.get("DB_USER"),
            "PASSWORD": os.environ.get("DB_PASSWORD"),
            "HOST": os.environ.get("DB_HOST"),
            "PORT": os.environ.get("DB_PORT", "5432"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "Asia/Tehran"


USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ("fa", _("Persian")),
    ("en", _("English")),
]


LOGIN_URL = "/login/"

LOGIN_REDIRECT_URL = "/"

STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR / "static"]

PWA_APP_NAME = "Homino"
PWA_APP_DESCRIPTION = "Smart home service request platform"
PWA_APP_THEME_COLOR = "#ffffff"
PWA_APP_BACKGROUND_COLOR = "#ffffff"
PWA_APP_DISPLAY = "standalone"
PWA_APP_SCOPE = "/"
PWA_APP_ORIENTATION = "portrait"
PWA_APP_START_URL = "/"
PWA_APP_ICONS = [
    {"src": "/static/icons/icon-192x192.png", "sizes": "192x192"},
    {"src": "/static/icons/icon-512x512.png", "sizes": "512x512"},
]
PWA_APP_ICONS_APPLE = [{"src": "/static/icons/icon-192x192.png"}]
PWA_APP_DIR = "ltr"
PWA_APP_LANG = "en-US"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

SIMPLE_JWT.update(
    {
        "ALGORITHM": "HS256",
        "SIGNING_KEY": SECRET_KEY,
        "BLACKLIST_AFTER_ROTATION": True,
        "ROTATE_REFRESH_TOKENS": True,
    }
)


# ✅ جلوگیری از XSS
SECURE_BROWSER_XSS_FILTER = True

# ✅ جلوگیری از MIME sniffing
SECURE_CONTENT_TYPE_NOSNIFF = True

# ✅ جلوگیری از قرارگیری سایت در iframe دیگر دامنه‌ها (جلوگیری از Clickjacking)
X_FRAME_OPTIONS = "DENY"

# ✅ اجباری کردن HTTPS در کوکی‌ها (در فاز production)
SESSION_COOKIE_SECURE = False  # تغییر به True در production
CSRF_COOKIE_SECURE = False  # تغییر به True در production


# ✅ جلوگیری از ارسال body بزرگ (مثلاً آپلود مشکوک)
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # حداکثر ۵ مگابایت
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # مخصوص فایل‌ها


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
